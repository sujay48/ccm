package com.cognizant.ccm.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cognizant.ccm.client.AuthorizationFeignClient;
import com.cognizant.ccm.exception.GatewaySettingsParametersNotFoundException;
import com.cognizant.ccm.exception.InvalidTokenException;
import com.cognizant.ccm.model.AuthResponse;
import com.cognizant.ccm.model.GatewaySettings;
import com.cognizant.ccm.service.GatewaySettingsSerivce;

import lombok.extern.slf4j.Slf4j;

/**
 * 
 * Controller class which incorporates all the api endpoints
 * 
 * @author Sujay
 *
 */
@Slf4j
@RestController
@RequestMapping("/gateway-settings")
public class GatewaySettingsController {

	@Autowired
	private GatewaySettingsSerivce gatewaySettingsService;

	@Autowired
	private AuthorizationFeignClient authorizationFeignClient;

	/**
	 * Lists all the Gateway Settings Parameters
	 * 
	 * @return Gateway Settings Parameters List
	 * @throws GatewaySettingsParametersNotFoundException
	 * 
	 */
	@GetMapping
	public List<GatewaySettings> getGatewaySettingsList(@RequestHeader(name = "Authorization") String token)
			throws GatewaySettingsParametersNotFoundException, InvalidTokenException {
		log.info("START : getGatewaySettingsList()");
		AuthResponse authResponse = authorizationFeignClient.getValidity(token);
		if (authResponse.isValid()) {
			return gatewaySettingsService.getGatewaySettingsList();
		} else {
			throw new InvalidTokenException();
		}
	}

	/**
	 * Gets the Gateway Settings Parameters by Id
	 * 
	 * @param Gateway Settings Parameters Id
	 * @return Gateway Settings Parameter Object
	 * @throws GatewaySettingsParametersNotFoundException
	 * 
	 */
	@GetMapping("/{id}")
	public GatewaySettings getGatewaySettings(@PathVariable int id) throws GatewaySettingsParametersNotFoundException {
		log.info("START : getGatewaySettings()");
		return gatewaySettingsService.getGatewaySettings(id);
	}

	/**
	 * Adds new entry of Gateway Settings Parameters
	 * 
	 * @param Gateway Settings Parameters Object
	 * 
	 */
	@PostMapping
	public void addGatewaySettingsParameters(@RequestBody GatewaySettings gatewaySettings) {
		log.info("START : addGatewaySettingsParameters()");
		gatewaySettingsService.addGatewayServiceParameters(gatewaySettings);
		log.info("END : addGatewaySettingsParameters()");
	}

}
